{"version":3,"sources":["../../src/scripts/controls.js"],"names":["window","document","selectedSlotIndex","selectedPieceIndex","guess","Array","codeLength","fill","code","map","Math","floor","random","colorCount","console","log","board","slotCount","_","i","slot","getElementsByClassName","pegs","pegz","getElementById","addEventListener","ev","target","classList","contains","parseInt","dataset","slotIndex","pieceIndex","activate","index","color","colorPalette","style","background","indexOf","pegCount","getPegs","black","setTimeout","j","add","bind","undefined","white","piece","remove"],"mappings":"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","file":"controls.js","sourcesContent":["(function (window, document) {\r\n\tlet selectedSlotIndex = 0\r\n\tlet selectedPieceIndex = 0\r\n\r\n\tlet guess = new Array(codeLength).fill(null)\r\n\tconst code = new Array(codeLength).fill(null).map(() => Math.floor(Math.random() * colorCount))\r\n\tconsole.log(code)\r\n\r\n\tconst board = new Array(slotCount).fill().map((_, i) => {\r\n\t\tconst slot = document.getElementsByClassName('slot')[slotCount-1-i]\r\n\t\treturn slot.getElementsByClassName('piece')\r\n\t})\r\n\r\n\tconst pegs = new Array(slotCount).fill().map((_, i) => {\r\n\t\tconst pegz = document.getElementsByClassName('pegs')[slotCount-1-i]\r\n\t\treturn pegz.getElementsByClassName('peg')\r\n\t})\r\n\r\n\r\n\tdocument.getElementById('board').addEventListener('click', function(ev) {\r\n\t\tif (ev.target.classList.contains('piece')) {\r\n\t\t\tif (parseInt(ev.target.dataset.slotIndex) === selectedSlotIndex) {\r\n\t\t\t\tselectedPieceIndex = parseInt(ev.target.dataset.pieceIndex)\r\n\t\t\t\tactivate(board[selectedSlotIndex][selectedPieceIndex])\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n\r\n\r\n\tdocument.getElementById('inputs').addEventListener('click', function(ev) {\r\n\t\tconst index = parseInt(ev.target.dataset.index)\r\n\t\tconst color = colorPalette[index]\r\n\t\tguess[selectedPieceIndex] = index\r\n\t\tboard[selectedSlotIndex][selectedPieceIndex].style.background = color\r\n\t\tselectedPieceIndex = (selectedPieceIndex+1) % codeLength\r\n\t\tactivate(board[selectedSlotIndex][selectedPieceIndex])\r\n\t})\r\n\r\n\r\n\tdocument.getElementById('submit').addEventListener('click', function(ev) {\r\n\t\t// Check if the user completed all the spots\r\n\t\tif (guess.indexOf(null) === -1) {\r\n\t\t\tconst pegCount = getPegs(code, guess)\r\n\t\t\tconsole.log(pegCount)\r\n\t\t\tfor (let i=0; i<codeLength; ++i) {\r\n\t\t\t\tif (i < pegCount.black) {\r\n\t\t\t\t\tsetTimeout((function(j, i) {\r\n\t\t\t\t\t\tpegs[j][i].classList.add('black')\r\n\t\t\t\t\t}).bind(undefined, selectedSlotIndex, i), i*400)\r\n\t\t\t\t} else if (i < pegCount.black + pegCount.white) {\r\n\t\t\t\t\tsetTimeout((function(j, i) {\r\n\t\t\t\t\t\tpegs[j][i].classList.add('white')\r\n\t\t\t\t\t}).bind(undefined, selectedSlotIndex, i), i*400)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Win ?\r\n\t\t\tif (pegCount.black === codeLength) {\r\n\t\t\t\tconsole.log('WIIIIIIN')\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Try again ?\t\r\n\t\t\telse if (selectedSlotIndex < slotCount-1) {\r\n\t\t\t\t// Reset guess\r\n\t\t\t\tguess.fill(null)\r\n\t\t\t\t++selectedSlotIndex\r\n\t\t\t\tselectedPieceIndex = 0\r\n\t\t\t\tactivate(board[selectedSlotIndex][selectedPieceIndex])\r\n\t\t\t}\r\n\r\n\t\t\t// Lose ?\r\n\t\t\telse {\r\n\t\t\t\tconsole.log('LOOOOOOOOOOOOSE')\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n\r\n\r\n\tfunction activate(target) {\r\n\t\t// Deselect all the pieces\r\n\t\tfor (let slot of board) {\r\n\t\t\tfor (let piece of slot) {\r\n\t\t\t\tpiece.classList.remove('active')\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\ttarget.classList.add('active')\r\n\t}\r\n\r\n\r\n\tactivate(board[selectedSlotIndex][selectedPieceIndex])\r\n})(window, document)\r\n"]}