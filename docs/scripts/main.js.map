{"version":3,"sources":["../../src/scripts/main.js"],"names":["document","getElementById","addEventListener","ev","target","classList","contains","parseInt","dataset","slotIndex","selectedSlotIndex","selectedPieceIndex","pieceIndex","activatePiece","index","color","colorPalette","guess","board","style","background","codeLength","indexOf","pegCount","getPegs","code","console","log","i","black","activatePeg","white","end","slotCount","fill","j","type","setTimeout","pegs","add","bind","undefined","slot","piece","remove","codeComplexity","augmentedContrast","init","CONTROLS","codepieces","getElementsByClassName","length","reset","Array","map","_","Math","floor","random","initUI","pegz","window","onload"],"mappings":";;AAAA;AACA;AACA;;AAEAA,SAASC,cAAT,CAAwB,OAAxB,EAAiCC,gBAAjC,CAAkD,OAAlD,EAA2D,UAASC,EAAT,EAAa;AACvE,KAAIA,GAAGC,MAAH,CAAUC,SAAV,CAAoBC,QAApB,CAA6B,OAA7B,CAAJ,EAA2C;AAC1C,MAAIC,SAASJ,GAAGC,MAAH,CAAUI,OAAV,CAAkBC,SAA3B,MAA0CC,iBAA9C,EAAiE;AAChEC,wBAAqBJ,SAASJ,GAAGC,MAAH,CAAUI,OAAV,CAAkBI,UAA3B,CAArB;AACAC,iBAAcH,iBAAd,EAAiCC,kBAAjC;AACA;AACD;AACD,CAPD;;AASA;AACA;AACA;;AAEAX,SAASC,cAAT,CAAwB,QAAxB,EAAkCC,gBAAlC,CAAmD,OAAnD,EAA4D,UAASC,EAAT,EAAa;AACxE,KAAMW,QAAQP,SAASJ,GAAGC,MAAH,CAAUI,OAAV,CAAkBM,KAA3B,CAAd;AACA,KAAMC,QAAQC,aAAaF,KAAb,CAAd;AACAG,OAAMN,kBAAN,IAA4BG,KAA5B;AACAI,OAAMR,iBAAN,EAAyBC,kBAAzB,EAA6CQ,KAA7C,CAAmDC,UAAnD,GAAgEL,KAAhE;AACAJ,sBAAqB,CAACA,qBAAmB,CAApB,IAAyBU,UAA9C;AACAR,eAAcH,iBAAd,EAAiCC,kBAAjC;AACA,CAPD;;AASA;AACA;AACA;;AAEAX,SAASC,cAAT,CAAwB,QAAxB,EAAkCC,gBAAlC,CAAmD,OAAnD,EAA4D,UAASC,EAAT,EAAa;AACxE;AACA,KAAIc,MAAMK,OAAN,CAAc,IAAd,MAAwB,CAAC,CAA7B,EAAgC;AAC/B,MAAMC,WAAWC,QAAQC,IAAR,EAAcR,KAAd,CAAjB;AACAS,UAAQC,GAAR,CAAYJ,QAAZ;AACA,OAAK,IAAIK,IAAE,CAAX,EAAcA,IAAEP,UAAhB,EAA4B,EAAEO,CAA9B,EAAiC;AAChC,OAAIA,IAAIL,SAASM,KAAjB,EAAwB;AACvBC,gBAAYpB,iBAAZ,EAA+BkB,CAA/B,EAAkC,OAAlC;AACA,IAFD,MAEO,IAAIA,IAAIL,SAASM,KAAT,GAAiBN,SAASQ,KAAlC,EAAyC;AAC/CD,gBAAYpB,iBAAZ,EAA+BkB,CAA/B,EAAkC,OAAlC;AACA;AACD;;AAED;AACA,MAAIL,SAASM,KAAT,KAAmBR,UAAvB,EAAmC;AAClCW,OAAI,IAAJ;AACAN,WAAQC,GAAR,CAAY,UAAZ;AACA;;AAED;AALA,OAMK,IAAIjB,oBAAoBuB,YAAU,CAAlC,EAAqC;AACzC;AACAhB,UAAMiB,IAAN,CAAW,IAAX;AACA,MAAExB,iBAAF;AACAC,yBAAqB,CAArB;AACAE,kBAAcH,iBAAd,EAAiCC,kBAAjC;AACA;;AAED;AARK,QASA;AACJqB,SAAI,KAAJ;AACAN,aAAQC,GAAR,CAAY,iBAAZ;AACA;AACD;AACD,CAlCD;;AAoCA;AACA;AACA;;AAEA,SAASG,WAAT,CAAqBK,CAArB,EAAwBP,CAAxB,EAA2BQ,IAA3B,EAAiC;AAChCC,YAAY,UAASF,CAAT,EAAYP,CAAZ,EAAe;AAC1BU,OAAKH,CAAL,EAAQP,CAAR,EAAWvB,SAAX,CAAqBkC,GAArB,CAAyBH,IAAzB;AACA,EAFU,CAERI,IAFQ,CAEHC,SAFG,EAEQN,CAFR,EAEWP,CAFX,EAEcQ,IAFd,CAAX,EAEgCR,IAAE,GAFlC;AAGA;;AAED,SAASf,aAAT,CAAuBsB,CAAvB,EAA0BP,CAA1B,EAA6B;AAC5B;AAD4B;AAAA;AAAA;;AAAA;AAE5B,uBAAiBV,KAAjB,8HAAwB;AAAA,OAAfwB,IAAe;AAAA;AAAA;AAAA;;AAAA;AACvB,0BAAkBA,IAAlB,mIAAwB;AAAA,SAAfC,KAAe;;AACvBA,WAAMtC,SAAN,CAAgBuC,MAAhB,CAAuB,QAAvB;AACA;AAHsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIvB;AAN2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQ5B1B,OAAMiB,CAAN,EAASP,CAAT,EAAYvB,SAAZ,CAAsBkC,GAAtB,CAA0B,QAA1B;AACA;;AAED;AACA;AACA;;AAEA,IAAIN,kBAAJ;AAAA,IAAeZ,mBAAf;AAAA,IAA2BwB,uBAA3B;AAAA,IAA2CC,0BAA3C;AACA,IAAI9B,qBAAJ;AACA,IAAIN,0BAAJ;AAAA,IAAuBC,2BAAvB;AACA,IAAIM,cAAJ;AAAA,IAAWQ,aAAX;AACA,IAAIP,cAAJ;AAAA,IAAWoB,aAAX;;AAEA;AACA;AACA;;AAEA,SAASS,IAAT,GAAgB;AACf;AACAd,aAAY,CAAZ;AACAY,kBAAiB,CAAjB;AACAxB,cAAa,CAAb;AACAyB,qBAAoB,KAApB;;AAEAE,UAASD,IAAT;AACA;;AAED;AACA;AACA;;AAEA,SAASf,GAAT,GAAe;AACd;AACA,KAAMiB,aAAajD,SAASkD,sBAAT,CAAgC,YAAhC,CAAnB;AACA,MAAK,IAAItB,IAAE,CAAX,EAAcA,IAAEqB,WAAWE,MAA3B,EAAmC,EAAEvB,CAArC,EAAwC;AACvCS,aAAY,UAASM,KAAT,EAAgB5B,KAAhB,EAAuB;AAClC4B,SAAMtC,SAAN,CAAgBkC,GAAhB,CAAoB,QAApB;AACAI,SAAMxB,KAAN,CAAYC,UAAZ,GAAyBL,KAAzB;AACA,GAHU,CAGRyB,IAHQ,CAGHC,SAHG,EAGQQ,WAAWrB,CAAX,CAHR,EAGuBZ,aAAaS,KAAKG,CAAL,CAAb,CAHvB,CAAX,EAG0DA,IAAE,GAH5D;AAIA;AAGD;;AAED;AACA;AACA;;AAEA,SAASwB,KAAT,GAAiB;AAChB;AACApC,gBAAe,IAAIqC,KAAJ,CAAUR,cAAV,EAA0BX,IAA1B,GAAiCoB,GAAjC,CAAqC,UAACC,CAAD,EAAI3B,CAAJ,EAAU;AAC7D,kBAAc4B,KAAKC,KAAL,CAAW7B,IAAEiB,cAAF,GAAiB,GAA5B,CAAd;AACA,EAFc,CAAf;;AAIA;AACAnC,qBAAoB,CAApB;AACAC,sBAAqB,CAArB;;AAEA;AACAM,SAAQ,IAAIoC,KAAJ,CAAUhC,UAAV,EAAsBa,IAAtB,CAA2B,IAA3B,CAAR;AACAT,QAAO,IAAI4B,KAAJ,CAAUhC,UAAV,EAAsBa,IAAtB,CAA2B,IAA3B,EAAiCoB,GAAjC,CAAqC;AAAA,SAAME,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgBb,cAA3B,CAAN;AAAA,EAArC,CAAP;AACAnB,SAAQC,GAAR,CAAYF,IAAZ;;AAEA;AACAkC,QAAOtC,UAAP,EAAmBwB,cAAnB,EAAmCZ,SAAnC,EAA8CjB,YAA9C;;AAEA;AACAE,SAAQ,IAAImC,KAAJ,CAAUpB,SAAV,EAAqBC,IAArB,GAA4BoB,GAA5B,CAAgC,UAACC,CAAD,EAAI3B,CAAJ,EAAU;AACjD,MAAMc,OAAO1C,SAASkD,sBAAT,CAAgC,MAAhC,EAAwCjB,YAAU,CAAV,GAAYL,CAApD,CAAb;AACA,SAAOc,KAAKQ,sBAAL,CAA4B,OAA5B,CAAP;AACA,EAHO,CAAR;;AAKAZ,QAAO,IAAIe,KAAJ,CAAUpB,SAAV,EAAqBC,IAArB,GAA4BoB,GAA5B,CAAgC,UAACC,CAAD,EAAI3B,CAAJ,EAAU;AAChD,MAAMgC,OAAO5D,SAASkD,sBAAT,CAAgC,MAAhC,EAAwCjB,YAAU,CAAV,GAAYL,CAApD,CAAb;AACA,SAAOgC,KAAKV,sBAAL,CAA4B,KAA5B,CAAP;AACA,EAHM,CAAP;;AAKArC,eAAcH,iBAAd,EAAiCC,kBAAjC;AACA;;AAEDkD,OAAOC,MAAP,GAAgB,YAAW;AAC1Bf;AACAK;AACA,CAHD","file":"main.js","sourcesContent":["//\r\n// When a user clicks the board, select the piece if possible\r\n//\r\n\r\ndocument.getElementById('board').addEventListener('click', function(ev) {\r\n\tif (ev.target.classList.contains('piece')) {\r\n\t\tif (parseInt(ev.target.dataset.slotIndex) === selectedSlotIndex) {\r\n\t\t\tselectedPieceIndex = parseInt(ev.target.dataset.pieceIndex)\r\n\t\t\tactivatePiece(selectedSlotIndex, selectedPieceIndex)\r\n\t\t}\r\n\t}\r\n})\r\n\r\n//\r\n// Manage color input by user\r\n//\r\n\r\ndocument.getElementById('inputs').addEventListener('click', function(ev) {\r\n\tconst index = parseInt(ev.target.dataset.index)\r\n\tconst color = colorPalette[index]\r\n\tguess[selectedPieceIndex] = index\r\n\tboard[selectedSlotIndex][selectedPieceIndex].style.background = color\r\n\tselectedPieceIndex = (selectedPieceIndex+1) % codeLength\r\n\tactivatePiece(selectedSlotIndex, selectedPieceIndex)\r\n})\r\n\r\n//\r\n// Submit, main game logic\r\n//\r\n\r\ndocument.getElementById('submit').addEventListener('click', function(ev) {\r\n\t// Check if the user completed all the spots\r\n\tif (guess.indexOf(null) === -1) {\r\n\t\tconst pegCount = getPegs(code, guess)\r\n\t\tconsole.log(pegCount)\r\n\t\tfor (let i=0; i<codeLength; ++i) {\r\n\t\t\tif (i < pegCount.black) {\r\n\t\t\t\tactivatePeg(selectedSlotIndex, i, 'black')\r\n\t\t\t} else if (i < pegCount.black + pegCount.white) {\r\n\t\t\t\tactivatePeg(selectedSlotIndex, i, 'white')\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Win ?\r\n\t\tif (pegCount.black === codeLength) {\r\n\t\t\tend(true)\r\n\t\t\tconsole.log('WIIIIIIN')\r\n\t\t}\r\n\t\t\r\n\t\t// Try again ?\t\r\n\t\telse if (selectedSlotIndex < slotCount-1) {\r\n\t\t\t// Reset guess\r\n\t\t\tguess.fill(null)\r\n\t\t\t++selectedSlotIndex\r\n\t\t\tselectedPieceIndex = 0\r\n\t\t\tactivatePiece(selectedSlotIndex, selectedPieceIndex)\r\n\t\t}\r\n\r\n\t\t// Lose ?\r\n\t\telse {\r\n\t\t\tend(false)\r\n\t\t\tconsole.log('LOOOOOOOOOOOOSE')\r\n\t\t}\r\n\t}\r\n})\r\n\r\n//\r\n// Utility\r\n//\r\n\r\nfunction activatePeg(j, i, type) {\r\n\tsetTimeout((function(j, i) {\r\n\t\tpegs[j][i].classList.add(type)\r\n\t}).bind(undefined, j, i, type), i*100)\r\n}\r\n\r\nfunction activatePiece(j, i) {\r\n\t// Deselect all the pieces\r\n\tfor (let slot of board) {\r\n\t\tfor (let piece of slot) {\r\n\t\t\tpiece.classList.remove('active')\r\n\t\t}\r\n\t}\r\n\t\r\n\tboard[j][i].classList.add('active')\r\n}\r\n\r\n//\r\n// Start/end game\r\n//\r\n\r\nlet slotCount, codeLength, codeComplexity, augmentedContrast\r\nlet colorPalette\r\nlet selectedSlotIndex, selectedPieceIndex\r\nlet guess, code\r\nlet board, pegs\r\n\r\n//\r\n// Init function, called once\r\n//\r\n\r\nfunction init() {\r\n\t// Constants\r\n\tslotCount = 6\r\n\tcodeComplexity = 6\r\n\tcodeLength = 4\r\n\taugmentedContrast = false\r\n\r\n\tCONTROLS.init()\r\n}\r\n\r\n//\r\n// Manage game endings\r\n//\r\n\r\nfunction end() {\r\n\t// Display the code\r\n\tconst codepieces = document.getElementsByClassName('code_piece')\r\n\tfor (let i=0; i<codepieces.length; ++i) {\r\n\t\tsetTimeout((function(piece, color) {\r\n\t\t\tpiece.classList.add('active')\r\n\t\t\tpiece.style.background = color\r\n\t\t}).bind(undefined, codepieces[i], colorPalette[code[i]]), i*400)\r\n\t}\r\n\r\n\t\r\n}\r\n\r\n//\r\n// Reset the game after end\r\n//\r\n\r\nfunction reset() {\r\n\t// Generate color palette\r\n\tcolorPalette = new Array(codeComplexity).fill().map((_, i) => {\r\n\t\treturn `hsl(${Math.floor(i/codeComplexity*360)}, 90%, 60%)`\r\n\t})\r\n\r\n\t// User slot tracker\r\n\tselectedSlotIndex = 0\r\n\tselectedPieceIndex = 0\r\n\r\n\t// Code generation\r\n\tguess = new Array(codeLength).fill(null)\r\n\tcode = new Array(codeLength).fill(null).map(() => Math.floor(Math.random() * codeComplexity))\r\n\tconsole.log(code)\r\n\r\n\t// Reset the UI\r\n\tinitUI(codeLength, codeComplexity, slotCount, colorPalette)\r\n\t\r\n\t// DOM objects\r\n\tboard = new Array(slotCount).fill().map((_, i) => {\r\n\t\tconst slot = document.getElementsByClassName('slot')[slotCount-1-i]\r\n\t\treturn slot.getElementsByClassName('piece')\r\n\t})\r\n\r\n\tpegs = new Array(slotCount).fill().map((_, i) => {\r\n\t\tconst pegz = document.getElementsByClassName('pegs')[slotCount-1-i]\r\n\t\treturn pegz.getElementsByClassName('peg')\r\n\t})\r\n\r\n\tactivatePiece(selectedSlotIndex, selectedPieceIndex)\r\n}\r\n\r\nwindow.onload = function() {\r\n\tinit()\r\n\treset()\r\n}"]}